from logger import Logger

from pymclevel import alphaMaterials as am

manMadeBlocks = [
    am.Cobblestone,
    am.WoodPlanks,
    am.Glass,
    am.LapisLazuliBlock,
    am.Dispenser,
    am.NoteBlock,
    am.Bed,
    am.PoweredRail,
    am.DetectorRail,
    am.StickyPiston,
    am.Web,
    am.Piston,
    am.PistonHead,
    am.WhiteWool,
    am.OrangeWool,
    am.MagentaWool,
    am.LightBlueWool,
    am.YellowWool,
    am.LightGreenWool,
    am.PinkWool,
    am.GrayWool,
    am.LightGrayWool,
    am.CyanWool,
    am.PurpleWool,
    am.BlueWool,
    am.BrownWool,
    am.DarkGreenWool,
    am.RedWool,
    am.BlackWool,
    am.Block36,
    am.BlockofGold,
    am.BlockofIron,
    am.DoubleStoneSlab,
    am.DoubleSandstoneSlab,
    am.DoubleWoodenSlab,
    am.DoubleCobblestoneSlab,
    am.DoubleBrickSlab,
    am.DoubleStoneBrickSlab,
    am.StoneSlab,
    am.SandstoneSlab,
    am.WoodenSlab,
    am.CobblestoneSlab,
    am.BrickSlab,
    am.StoneBrickSlab,
    am.Brick,
    am.TNT,
    am.Bookshelf,
    am.MossStone,
    am.Obsidian,
    am.Torch,
    am.MonsterSpawner,
    am.WoodenStairs,
    am.Chest,
    am.RedstoneWire,
    am.DiamondOre,
    am.BlockofDiamond,
    am.CraftingTable,
    am.Crops,
    am.Farmland,
    am.Furnace,
    am.LitFurnace,
    am.Sign,
    am.WoodenDoor,
    am.Ladder,
    am.Rail,
    am.StoneStairs,
    am.WallSign,
    am.Lever,
    am.StoneFloorPlate,
    am.IronDoor,
    am.WoodFloorPlate,
    am.RedstoneTorchOff,
    am.RedstoneTorchOn,
    am.Button,
    am.Jukebox,
    am.Fence,
    am.Netherrack,
    am.SoulSand,
    am.Glowstone,
    am.NetherPortal,
    am.JackOLantern,
    am.Cake,
    am.RedstoneRepeaterOff,
    am.RedstoneRepeaterOn,
    am.Trapdoor,
    am.StoneBricks,
    am.MossyStoneBricks,
    am.CrackedStoneBricks,
    am.IronBars,
    am.GlassPane,
    am.Watermelon,
    am.PumpkinStem,
    am.MelonStem,
    am.FenceGate,
    am.BrickStairs,
    am.StoneBrickStairs,
    am.NetherBrick,
    am.NetherBrickFence,
    am.NetherBrickStairs,
    am.NetherWart,
    am.EnchantmentTable,
    am.BrewingStand,
    am.Cauldron,
    am.EnderPortal,
    am.PortalFrame,
    am.EndStone,
    am.DragonEgg,
    am.RedstoneLampoff,
    am.RedstoneLampon,
    am.OakWoodDoubleSlab,
    am.SpruceWoodDoubleSlab,
    am.BirchWoodDoubleSlab,
    am.JungleWoodDoubleSlab,
    am.OakWoodSlab,
    am.SpruceWoodSlab,
    am.BirchWoodSlab,
    am.JungleWoodSlab,
    am.SandstoneStairs,
    am.EnderChest,
    am.TripwireHook,
    am.Tripwire,
    am.BlockofEmerald,
    am.SpruceWoodStairs,
    am.BirchWoodStairs,
    am.JungleWoodStairs,
    am.CobblestoneWall,
    am.MossyCobblestoneWall,
    am.FlowerPot,
    am.Carrots,
    am.Potatoes,
    am.WoodenButton,
    am.MobHead,
    am.Anvil,
    am.TrappedChest,
    am.WeightedPressurePlateLight,
    am.WeightedPressurePlateHeavy,
    am.RedstoneComparatorInactive,
    am.RedstoneComparatorActive,
    am.DaylightSensor,
    am.BlockofRedstone,
    am.NetherQuartzOre,
    am.Hopper,
    am.BlockofQuartz,
    am.QuartzStairs,
    am.ActivatorRail,
    am.Dropper
]

manMadeBlockID = [m.ID for m in manMadeBlocks]

def removeManMadeBlocks(level, box):
    try:
        for (chunk, slices, point) in level.getChunkSlices(box):
            blocks = chunk.Blocks[slices]
            for m in manMadeBlockID:
                blocks[blocks == m] = 0
            chunk.dirty = True

    except Exception as e:
        logger.error(e)